********************** README: Tethering ******************************************
***********************************************************************************
authors: Alexandra Berke, Neil Fulwiler
*****************************

3 Components to tether internet connection from EC2 server to laptop that needs internet connection:
	1) Client server -- runs on laptop
	2) Webapp	-- runs on smartphone (or any other device)
	3) EC2 server


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
WEB APP
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	The webapp is the middle-man in passing messages between EC2 server and laptop in need of internet connection
		The idea is that although the laptop doesn't have internet, the smartphone is on the 3G network.
		The laptop creates its own network that the smartphone connections to.
		At the same time, the smartphone can also talk to the EC2 server over the 3G network.
		The smartphone requests the webapp from the EC2 server (sends HTTP request) and the webapp does the work of being the middle-man.
	
	simple set of files found in webapp/ directory:
		webapp.html
		webapp.css
		webapp.js
	The javascript file opens a websocket connection to the client server at address 169.254.134.89:6354
					and opens a websocket connection to the EC2 server at address ec2-174-129-190-18.compute-1.amazonaws.com:6354
	
	When a message is received from one websocket, it is printed as html and forwarded to the other websocket
	Note: These messages are base64 encoded and therefore not human-readable


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
CLIENT SERVER
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The client server's job is to basically set up a connection routing all outgoing packets through
the tun to the websocket, and all incoming packets from teh websocket back into the tun. This is
the entire job of the client server and we tried to accomplish this by breaking it up into very
modular pieces. The BasicWebSocket is a simple websocket that listens for a connection on the 
URL-spec used to initialize the tornado.web.Application. Once a connection with the websocket is 
established, the loop can be completed and the tun then begins forwarding all of its messages 
into the websocket and out to the phone. Then the websocket uses a callback that we give it in
order to write its incoming messages back to the tun device which are passed back up the stack to
the application layer. 

See files:
	client_server.py	

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
EC2 server
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
See files:
	node.py
	static_file_server.py
	server.py
	sniffing.py
	
3 Components all handled and owned by Node (found in node.py):
	1) static_file_server listens on port 8080 and serves the webapp files to the requesting smartphone.
	
	2) server.py has the BasicWebSocket which is the websocket listening on port 6354 and that the webapp connects to on the EC server side.
		When BasicWebSocket receives a message, it passes it to the node.  The node constructs an IP/TCP packet from the message.
		The node adds the pair of ports (packet.sport, packet.dport) to its port_list to use for filtering sniffed packets.
		The node replaces the ip.src address of the packet with its own 'eth0' ip address and sends off the packet as if it 
			had originated the packet itself.
	
	3) sniffing.py has a SniffingThread that the Node owns an instance of.
		The SniffingThread sniffs incoming packets.  It filters by reading off interface 'eth0' and only loops at 'tcp' packets.
		It passes these packets back to the node for the node to further filter.
			To further filter, the node checks that the port pair is in its remembered list of port pairs port_list.
			If the port pair is there, then this means the packet needs to go back to the client laptop.
			The node then replaces the ip.dst address with the laptop's ip address and sends it back to the laptop as a message
				through the BasicWebSocket.
				
				

